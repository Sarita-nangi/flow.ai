import express from 'express';
import sqlite3 from 'sqlite3';
const express = require('express');
const sqlite3 = require('sqlite3').verbose();
const app = express();
const PORT = process.env.PORT || 3000;
const db = new sqlite3.Database(':memory:'); 
db.serialize(() => {
    db.run(`CREATE TABLE IF NOT EXISTS transactions (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        type TEXT NOT NULL CHECK(type IN ('income', 'expense')),
        category TEXT NOT NULL,
        amount REAL NOT NULL CHECK(amount > 0),
        date TEXT NOT NULL,
        description TEXT
    )`);
    db.run(`CREATE TABLE IF NOT EXISTS categories (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        name TEXT NOT NULL UNIQUE,
        type TEXT NOT NULL CHECK(type IN ('income', 'expense'))
    )`);
});
app.use(express.json());
function handleError(res, message, code = 400) {
    res.status(code).json({ error: message });
}
app.post('/transactions', (req, res) => {
    const { type, category, amount, date, description } = req.body;
    if (!type || !category || !amount || !date) {
        return handleError(res, 'All fields (type, category, amount, date) are required.');
    }
    const query = `INSERT INTO transactions (type, category, amount, date, description) VALUES (?, ?, ?, ?, ?)`;
    db.run(query, [type, category, amount, date, description], function (err) {
        if (err) return handleError(res, err.message);
        res.status(201).json({ id: this.lastID });
    });
});
app.get('/transactions', (req, res) => {
    const { page = 1, limit = 10, category, startDate, endDate } = req.query;
    const offset = (page - 1) * limit;
    let query = `SELECT * FROM transactions WHERE 1=1`;
    const params = [];
    if (category) {
        query += ` AND category = ?`;
        params.push(category);
    }
    if (startDate && endDate) {
        query += ` AND date BETWEEN ? AND ?`;
        params.push(startDate, endDate);
    }
    query += ` LIMIT ? OFFSET ?`;
    params.push(limit, offset);
    db.all(query, params, (err, rows) => {
        if (err) return handleError(res, err.message);
        res.json(rows);
    });
});
app.get('/transactions/:id', (req, res) => {
    const query = `SELECT * FROM transactions WHERE id = ?`;
    db.get(query, [req.params.id], (err, row) => {
        if (err) return handleError(res, err.message);
        if (!row) return handleError(res, 'Transaction not found', 404);
        res.json(row);
    });
});
app.put('/transactions/:id', (req, res) => {
    const { type, category, amount, date, description } = req.body;
    if (!type || !category || !amount || !date) {
        return handleError(res, 'All fields (type, category, amount, date) are required.');
    }
    const query = `UPDATE transactions SET type = ?, category = ?, amount = ?, date = ?, description = ? WHERE id = ?`;
    db.run(query, [type, category, amount, date, description, req.params.id], function (err) {
        if (err) return handleError(res, err.message);
        if (this.changes === 0) return handleError(res, 'Transaction not found', 404);
        res.json({ message: 'Transaction updated successfully' });
    });
});
app.delete('/transactions/:id', (req, res) => {
    const query = `DELETE FROM transactions WHERE id = ?`;
    db.run(query, [req.params.id], function (err) {
        if (err) return handleError(res, err.message);
        if (this.changes === 0) return handleError(res, 'Transaction not found', 404);
        res.json({ message: 'Transaction deleted successfully' });
    });
});
app.get('/summary', (req, res) => {
    const summaryQuery = `
        SELECT 
            SUM(CASE WHEN type = 'income' THEN amount ELSE 0 END) AS total_income,
            SUM(CASE WHEN type = 'expense' THEN amount ELSE 0 END) AS total_expense,
            SUM(CASE WHEN type = 'income' THEN amount ELSE -amount END) AS balance
        FROM transactions`;
    
    db.get(summaryQuery, [], (err, row) => {
        if (err) return handleError(res, err.message);
        res.json(row);
    });
});
app.listen(PORT, () => {
    console.log(`Server is running on port ${PORT}`);
});